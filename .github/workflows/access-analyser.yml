name: CDK Policy Generator
on:
  push:
    branches:
        - access-analyser
env:
  AWS_REGION : "us-west-2"
## These permissions are required for OIDC connection  
# permission can be added at job level or workflow level    
permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout
jobs:
  CDK_deploy_destroy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code to be deployed
        uses: actions/checkout@v3
      - name: Configure aws credentials for <role-name>
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          role-to-assume: arn:aws:iam::193333210305:role/Git_Role_Test
          role-session-name: ghgc-backend-access-analyse
          aws-region: us-west-2
    #   - name: Python Install
    #     uses: actions/setup-python@v4
    #     with:
    #       python-version: '3.10' 
    #   - name: Install AWS CDK v2
    #     run: npm install -g aws-cdk@2.x
    #   - name: Install requirements
    #     run: pip install -r requirements.txt
      - name: Record start time
        run: |
          start=$(date +%s)
          echo "start=$start" >> $GITHUB_ENV
      - name: Run deployment
        uses: "./.github/actions/cdk-deploy"
        with:
            env_aws_secret_name: ghgc-stac-ingestor-dev
      - name: Wait before starting policy generation
        run: sleep 130
      - name: Start policy generation
        run: |
          end=$(date +%s)
          output=$(aws accessanalyzer start-policy-generation \
          --policy-generation-details '{
            "principalArn": "arn:aws:iam::193333210305:role/Git_Role_Test"
          }' \
          --cloud-trail-details '{
            "accessRole": "arn:aws:iam::193333210305:role/Git_Role_Test",
            "endTime": '$end',
            "startTime": '${{ env.start }}',
            "trails": [
              {
                "allRegions": true,
                "cloudTrailArn": "arn:aws:cloudtrail:us-east-1:193333210305:trail/CDK-OIDC-GitHub-Trail",
                "regions": []
              }
            ]
          }')
          jobId=$(echo "$output" | jq -r .jobId)
          echo "policy_id='$jobId'" >> $GITHUB_ENV
      - name: Check job status
        run: |
          while true; do
            result=$(aws accessanalyzer get-generated-policy --job-id '${{ env.policy_id }}')
            status=$(echo "$result" | jq -r '.jobDetails.status')
            if [ "$status" = "SUCCEEDED" ]; then
              echo "status=$status" >> "GITHUB_ENV"
              break
            fi
            echo "Waiting for the policy generation to complete, current status: $status"
            sleep 30
          done
      - name: Retrieve policy
        run: |
          policy=$(aws accessanalyzer get-generated-policy --job-id '${{ env.policy_id }}' | jq '.generatedPolicyResult.generatedPolicies[0].policy' | jq -c .)
          if [[ -z "$policy" ]]; then
            echo "Fail :("
          fi
            echo "$policy"
